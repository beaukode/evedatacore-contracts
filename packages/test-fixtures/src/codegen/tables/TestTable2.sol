// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct TestTable2Data {
  bool[] valueB;
  uint256[] valueU;
  int8[] valueI8;
  address[] valueA;
  bytes8[] valueBy;
}

library TestTable2 {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "beauKode_dev", name: "TestTable2", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x7462626561754b6f64655f6465760000546573745461626c6532000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0000000500000000000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (uint256, address)
  Schema constant _keySchema = Schema.wrap(0x003402001f610000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (bool[], uint256[], int8[], address[], bytes8[])
  Schema constant _valueSchema = Schema.wrap(0x00000005c28182c3a90000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](2);
    keyNames[0] = "id";
    keyNames[1] = "owner";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](5);
    fieldNames[0] = "valueB";
    fieldNames[1] = "valueU";
    fieldNames[2] = "valueI8";
    fieldNames[3] = "valueA";
    fieldNames[4] = "valueBy";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get valueB.
   */
  function getValueB(uint256 id, address owner) internal view returns (bool[] memory valueB) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_bool());
  }

  /**
   * @notice Get valueB.
   */
  function _getValueB(uint256 id, address owner) internal view returns (bool[] memory valueB) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_bool());
  }

  /**
   * @notice Set valueB.
   */
  function setValueB(uint256 id, address owner, bool[] memory valueB) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode((valueB)));
  }

  /**
   * @notice Set valueB.
   */
  function _setValueB(uint256 id, address owner, bool[] memory valueB) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    StoreCore.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode((valueB)));
  }

  /**
   * @notice Get the length of valueB.
   */
  function lengthValueB(uint256 id, address owner) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get the length of valueB.
   */
  function _lengthValueB(uint256 id, address owner) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get an item of valueB.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemValueB(uint256 id, address owner, uint256 _index) internal view returns (bool) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 1, (_index + 1) * 1);
      return (_toBool(uint8(bytes1(_blob))));
    }
  }

  /**
   * @notice Get an item of valueB.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemValueB(uint256 id, address owner, uint256 _index) internal view returns (bool) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 1, (_index + 1) * 1);
      return (_toBool(uint8(bytes1(_blob))));
    }
  }

  /**
   * @notice Push an element to valueB.
   */
  function pushValueB(uint256 id, address owner, bool _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to valueB.
   */
  function _pushValueB(uint256 id, address owner, bool _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from valueB.
   */
  function popValueB(uint256 id, address owner) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 0, 1);
  }

  /**
   * @notice Pop an element from valueB.
   */
  function _popValueB(uint256 id, address owner) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 0, 1);
  }

  /**
   * @notice Update an element of valueB at `_index`.
   */
  function updateValueB(uint256 id, address owner, uint256 _index, bool _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of valueB at `_index`.
   */
  function _updateValueB(uint256 id, address owner, uint256 _index, bool _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get valueU.
   */
  function getValueU(uint256 id, address owner) internal view returns (uint256[] memory valueU) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 1);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /**
   * @notice Get valueU.
   */
  function _getValueU(uint256 id, address owner) internal view returns (uint256[] memory valueU) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 1);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /**
   * @notice Set valueU.
   */
  function setValueU(uint256 id, address owner, uint256[] memory valueU) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 1, EncodeArray.encode((valueU)));
  }

  /**
   * @notice Set valueU.
   */
  function _setValueU(uint256 id, address owner, uint256[] memory valueU) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    StoreCore.setDynamicField(_tableId, _keyTuple, 1, EncodeArray.encode((valueU)));
  }

  /**
   * @notice Get the length of valueU.
   */
  function lengthValueU(uint256 id, address owner) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * @notice Get the length of valueU.
   */
  function _lengthValueU(uint256 id, address owner) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * @notice Get an item of valueU.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemValueU(uint256 id, address owner, uint256 _index) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 32, (_index + 1) * 32);
      return (uint256(bytes32(_blob)));
    }
  }

  /**
   * @notice Get an item of valueU.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemValueU(uint256 id, address owner, uint256 _index) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 32, (_index + 1) * 32);
      return (uint256(bytes32(_blob)));
    }
  }

  /**
   * @notice Push an element to valueU.
   */
  function pushValueU(uint256 id, address owner, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 1, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to valueU.
   */
  function _pushValueU(uint256 id, address owner, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 1, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from valueU.
   */
  function popValueU(uint256 id, address owner) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 1, 32);
  }

  /**
   * @notice Pop an element from valueU.
   */
  function _popValueU(uint256 id, address owner) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 1, 32);
  }

  /**
   * @notice Update an element of valueU at `_index`.
   */
  function updateValueU(uint256 id, address owner, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of valueU at `_index`.
   */
  function _updateValueU(uint256 id, address owner, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get valueI8.
   */
  function getValueI8(uint256 id, address owner) internal view returns (int8[] memory valueI8) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 2);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_int8());
  }

  /**
   * @notice Get valueI8.
   */
  function _getValueI8(uint256 id, address owner) internal view returns (int8[] memory valueI8) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 2);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_int8());
  }

  /**
   * @notice Set valueI8.
   */
  function setValueI8(uint256 id, address owner, int8[] memory valueI8) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 2, EncodeArray.encode((valueI8)));
  }

  /**
   * @notice Set valueI8.
   */
  function _setValueI8(uint256 id, address owner, int8[] memory valueI8) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    StoreCore.setDynamicField(_tableId, _keyTuple, 2, EncodeArray.encode((valueI8)));
  }

  /**
   * @notice Get the length of valueI8.
   */
  function lengthValueI8(uint256 id, address owner) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 2);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get the length of valueI8.
   */
  function _lengthValueI8(uint256 id, address owner) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 2);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get an item of valueI8.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemValueI8(uint256 id, address owner, uint256 _index) internal view returns (int8) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 2, _index * 1, (_index + 1) * 1);
      return (int8(uint8(bytes1(_blob))));
    }
  }

  /**
   * @notice Get an item of valueI8.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemValueI8(uint256 id, address owner, uint256 _index) internal view returns (int8) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 2, _index * 1, (_index + 1) * 1);
      return (int8(uint8(bytes1(_blob))));
    }
  }

  /**
   * @notice Push an element to valueI8.
   */
  function pushValueI8(uint256 id, address owner, int8 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 2, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to valueI8.
   */
  function _pushValueI8(uint256 id, address owner, int8 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 2, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from valueI8.
   */
  function popValueI8(uint256 id, address owner) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 2, 1);
  }

  /**
   * @notice Pop an element from valueI8.
   */
  function _popValueI8(uint256 id, address owner) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 2, 1);
  }

  /**
   * @notice Update an element of valueI8 at `_index`.
   */
  function updateValueI8(uint256 id, address owner, uint256 _index, int8 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 2, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of valueI8 at `_index`.
   */
  function _updateValueI8(uint256 id, address owner, uint256 _index, int8 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 2, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get valueA.
   */
  function getValueA(uint256 id, address owner) internal view returns (address[] memory valueA) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 3);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_address());
  }

  /**
   * @notice Get valueA.
   */
  function _getValueA(uint256 id, address owner) internal view returns (address[] memory valueA) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 3);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_address());
  }

  /**
   * @notice Set valueA.
   */
  function setValueA(uint256 id, address owner, address[] memory valueA) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 3, EncodeArray.encode((valueA)));
  }

  /**
   * @notice Set valueA.
   */
  function _setValueA(uint256 id, address owner, address[] memory valueA) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    StoreCore.setDynamicField(_tableId, _keyTuple, 3, EncodeArray.encode((valueA)));
  }

  /**
   * @notice Get the length of valueA.
   */
  function lengthValueA(uint256 id, address owner) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 3);
    unchecked {
      return _byteLength / 20;
    }
  }

  /**
   * @notice Get the length of valueA.
   */
  function _lengthValueA(uint256 id, address owner) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 3);
    unchecked {
      return _byteLength / 20;
    }
  }

  /**
   * @notice Get an item of valueA.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemValueA(uint256 id, address owner, uint256 _index) internal view returns (address) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 3, _index * 20, (_index + 1) * 20);
      return (address(bytes20(_blob)));
    }
  }

  /**
   * @notice Get an item of valueA.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemValueA(uint256 id, address owner, uint256 _index) internal view returns (address) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 3, _index * 20, (_index + 1) * 20);
      return (address(bytes20(_blob)));
    }
  }

  /**
   * @notice Push an element to valueA.
   */
  function pushValueA(uint256 id, address owner, address _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 3, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to valueA.
   */
  function _pushValueA(uint256 id, address owner, address _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 3, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from valueA.
   */
  function popValueA(uint256 id, address owner) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 3, 20);
  }

  /**
   * @notice Pop an element from valueA.
   */
  function _popValueA(uint256 id, address owner) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 3, 20);
  }

  /**
   * @notice Update an element of valueA at `_index`.
   */
  function updateValueA(uint256 id, address owner, uint256 _index, address _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 3, uint40(_index * 20), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of valueA at `_index`.
   */
  function _updateValueA(uint256 id, address owner, uint256 _index, address _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 3, uint40(_index * 20), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get valueBy.
   */
  function getValueBy(uint256 id, address owner) internal view returns (bytes8[] memory valueBy) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 4);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_bytes8());
  }

  /**
   * @notice Get valueBy.
   */
  function _getValueBy(uint256 id, address owner) internal view returns (bytes8[] memory valueBy) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 4);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_bytes8());
  }

  /**
   * @notice Set valueBy.
   */
  function setValueBy(uint256 id, address owner, bytes8[] memory valueBy) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 4, EncodeArray.encode((valueBy)));
  }

  /**
   * @notice Set valueBy.
   */
  function _setValueBy(uint256 id, address owner, bytes8[] memory valueBy) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    StoreCore.setDynamicField(_tableId, _keyTuple, 4, EncodeArray.encode((valueBy)));
  }

  /**
   * @notice Get the length of valueBy.
   */
  function lengthValueBy(uint256 id, address owner) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 4);
    unchecked {
      return _byteLength / 8;
    }
  }

  /**
   * @notice Get the length of valueBy.
   */
  function _lengthValueBy(uint256 id, address owner) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 4);
    unchecked {
      return _byteLength / 8;
    }
  }

  /**
   * @notice Get an item of valueBy.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemValueBy(uint256 id, address owner, uint256 _index) internal view returns (bytes8) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 4, _index * 8, (_index + 1) * 8);
      return (bytes8(_blob));
    }
  }

  /**
   * @notice Get an item of valueBy.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemValueBy(uint256 id, address owner, uint256 _index) internal view returns (bytes8) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 4, _index * 8, (_index + 1) * 8);
      return (bytes8(_blob));
    }
  }

  /**
   * @notice Push an element to valueBy.
   */
  function pushValueBy(uint256 id, address owner, bytes8 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 4, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to valueBy.
   */
  function _pushValueBy(uint256 id, address owner, bytes8 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 4, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from valueBy.
   */
  function popValueBy(uint256 id, address owner) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 4, 8);
  }

  /**
   * @notice Pop an element from valueBy.
   */
  function _popValueBy(uint256 id, address owner) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 4, 8);
  }

  /**
   * @notice Update an element of valueBy at `_index`.
   */
  function updateValueBy(uint256 id, address owner, uint256 _index, bytes8 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 4, uint40(_index * 8), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of valueBy at `_index`.
   */
  function _updateValueBy(uint256 id, address owner, uint256 _index, bytes8 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 4, uint40(_index * 8), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get the full data.
   */
  function get(uint256 id, address owner) internal view returns (TestTable2Data memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(uint256 id, address owner) internal view returns (TestTable2Data memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    uint256 id,
    address owner,
    bool[] memory valueB,
    uint256[] memory valueU,
    int8[] memory valueI8,
    address[] memory valueA,
    bytes8[] memory valueBy
  ) internal {
    bytes memory _staticData;
    EncodedLengths _encodedLengths = encodeLengths(valueB, valueU, valueI8, valueA, valueBy);
    bytes memory _dynamicData = encodeDynamic(valueB, valueU, valueI8, valueA, valueBy);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    uint256 id,
    address owner,
    bool[] memory valueB,
    uint256[] memory valueU,
    int8[] memory valueI8,
    address[] memory valueA,
    bytes8[] memory valueBy
  ) internal {
    bytes memory _staticData;
    EncodedLengths _encodedLengths = encodeLengths(valueB, valueU, valueI8, valueA, valueBy);
    bytes memory _dynamicData = encodeDynamic(valueB, valueU, valueI8, valueA, valueBy);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(uint256 id, address owner, TestTable2Data memory _table) internal {
    bytes memory _staticData;
    EncodedLengths _encodedLengths = encodeLengths(
      _table.valueB,
      _table.valueU,
      _table.valueI8,
      _table.valueA,
      _table.valueBy
    );
    bytes memory _dynamicData = encodeDynamic(
      _table.valueB,
      _table.valueU,
      _table.valueI8,
      _table.valueA,
      _table.valueBy
    );

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(uint256 id, address owner, TestTable2Data memory _table) internal {
    bytes memory _staticData;
    EncodedLengths _encodedLengths = encodeLengths(
      _table.valueB,
      _table.valueU,
      _table.valueI8,
      _table.valueA,
      _table.valueBy
    );
    bytes memory _dynamicData = encodeDynamic(
      _table.valueB,
      _table.valueU,
      _table.valueI8,
      _table.valueA,
      _table.valueBy
    );

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(
    EncodedLengths _encodedLengths,
    bytes memory _blob
  )
    internal
    pure
    returns (
      bool[] memory valueB,
      uint256[] memory valueU,
      int8[] memory valueI8,
      address[] memory valueA,
      bytes8[] memory valueBy
    )
  {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    valueB = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_bool());

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(1);
    }
    valueU = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint256());

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(2);
    }
    valueI8 = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_int8());

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(3);
    }
    valueA = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_address());

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(4);
    }
    valueBy = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_bytes8());
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   *
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory,
    EncodedLengths _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (TestTable2Data memory _table) {
    (_table.valueB, _table.valueU, _table.valueI8, _table.valueA, _table.valueBy) = decodeDynamic(
      _encodedLengths,
      _dynamicData
    );
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(uint256 id, address owner) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(uint256 id, address owner) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(
    bool[] memory valueB,
    uint256[] memory valueU,
    int8[] memory valueI8,
    address[] memory valueA,
    bytes8[] memory valueBy
  ) internal pure returns (EncodedLengths _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = EncodedLengthsLib.pack(
        valueB.length * 1,
        valueU.length * 32,
        valueI8.length * 1,
        valueA.length * 20,
        valueBy.length * 8
      );
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(
    bool[] memory valueB,
    uint256[] memory valueU,
    int8[] memory valueI8,
    address[] memory valueA,
    bytes8[] memory valueBy
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(
        EncodeArray.encode((valueB)),
        EncodeArray.encode((valueU)),
        EncodeArray.encode((valueI8)),
        EncodeArray.encode((valueA)),
        EncodeArray.encode((valueBy))
      );
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    bool[] memory valueB,
    uint256[] memory valueU,
    int8[] memory valueI8,
    address[] memory valueA,
    bytes8[] memory valueBy
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData;
    EncodedLengths _encodedLengths = encodeLengths(valueB, valueU, valueI8, valueA, valueBy);
    bytes memory _dynamicData = encodeDynamic(valueB, valueU, valueI8, valueA, valueBy);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(uint256 id, address owner) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint160(owner)));

    return _keyTuple;
  }
}

/**
 * @notice Cast a value to a bool.
 * @dev Boolean values are encoded as uint8 (1 = true, 0 = false), but Solidity doesn't allow casting between uint8 and bool.
 * @param value The uint8 value to convert.
 * @return result The boolean value.
 */
function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
